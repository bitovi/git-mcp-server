# Example Environment Variables for git-mcp-server
# Copy this file to .env and modify the values as needed.

# --- MCP Server Configuration ---

# Transport mechanism: 'stdio' (default) or 'http'
# For Docker deployment, use 'http'
MCP_TRANSPORT_TYPE=http

# --- HTTP Transport Settings (only used if MCP_TRANSPORT_TYPE=http) ---

# Port for the HTTP server
MCP_HTTP_PORT=3010

# Host address for the HTTP server to bind to
# Use 0.0.0.0 for Docker containers to allow external access
MCP_HTTP_HOST=0.0.0.0

# Comma-separated list of allowed origins for CORS (e.g., http://localhost:8080,https://my-app.com)
# MCP_ALLOWED_ORIGINS=

# --- Docker-Specific Configuration ---

# Force console logging for Docker Desktop visibility
MCP_FORCE_CONSOLE_LOGGING=true

# Set logging level for debugging
MCP_LOG_LEVEL=debug

# --- Git Authentication (Optional) ---

# GitHub Personal Access Token for private repository access
# Create one at: https://github.com/settings/tokens
# GIT_TOKEN=ghp_your_personal_access_token_here

# GitHub username (defaults to "token" if not set)
# GIT_USERNAME=your_github_username

# --- Git Configuration ---

# Set to "true" to enable signing attempts for commits made by the git_commit tool.
# Requires server-side Git/key setup (GPG or SSH). See README for details.
# GIT_SIGN_COMMITS=false

# --- Security Configuration ---

# Secret key for signing/verifying authentication tokens (required if auth is enabled in the future).
# MCP_AUTH_SECRET_KEY=

# --- Logging Configuration ---

# Logging level: 'debug', 'info', 'notice', 'warning', 'error', 'crit', 'alert', 'emerg'
# Note: MCP_LOG_LEVEL is set above for Docker usage
# MCP_LOG_LEVEL=info

# --- Docker Usage Instructions ---
# 1. Copy this file: cp .env.example .env
# 2. Edit .env with your actual values (especially GIT_TOKEN if needed)
# 3. Run Docker with: docker run -d --name git-mcp-server -p 3010:3010 -v /path/to/repos:/workspace --env-file .env bitovi/git-mcp-server
